# ! [doc = "Peripheral access API for SOC microcontrollers (generated using svd2rust v0.28.0 ( ))\n\nYou can find an overview of the generated API [here].\n\nAPI features to be included in the [next]
svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.\n\n[here]: https://docs.rs/svd2rust/0.28.0/svd2rust/#peripheral-api\n[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased\n[repository]: https://github.com/rust-embedded/svd2rust"]
# ! [deny (dead_code)]
# ! [deny (improper_ctypes)]
# ! [deny (missing_docs)]
# ! [deny (no_mangle_generic_items)]
# ! [deny (non_shorthand_field_patterns)]
# ! [deny (overflowing_literals)]
# ! [deny (path_statements)]
# ! [deny (patterns_in_fns_without_body)]
# ! [deny (private_in_public)]
# ! [deny (unconditional_recursion)]
# ! [deny (unused_allocation)]
# ! [deny (unused_comparisons)]
# ! [deny (unused_parens)]
# ! [deny (while_true)]
# ! [allow (non_camel_case_types)]
# ! [allow (non_snake_case)]
# ! [no_std]
use core :: ops :: Deref ; use core :: marker :: PhantomData ; # [allow (unused_imports)]
use generic :: * ; # [doc = r"Common register and bit access and modify traits"]
pub mod generic { use core :: marker ; # [doc = " Raw register type (`u8`, `u16`, `u32`, ...)"]
pub trait RawReg : Copy + Default + From < bool > + core :: ops :: BitOr < Output = Self > + core :: ops :: BitAnd < Output = Self > + core :: ops :: BitOrAssign + core :: ops :: BitAndAssign + core :: ops :: Not < Output = Self > + core :: ops :: Shl < u8 , Output = Self > { # [doc = " Mask for bits of width `WI`"]
fn mask < const WI : u8 > () -> Self ; # [doc = " Mask for bits of width 1"]
fn one () -> Self ; } macro_rules ! raw_reg { ($ U : ty , $ size : literal , $ mask : ident) => { impl RawReg for $ U { # [inline (always)]
fn mask < const WI : u8 > () -> Self { $ mask ::< WI > () } # [inline (always)]
fn one () -> Self { 1 } } const fn $ mask < const WI : u8 > () -> $ U { <$ U >:: MAX >> ($ size - WI) } } ; } raw_reg ! (u8 , 8 , mask_u8) ; raw_reg ! (u16 , 16 , mask_u16) ; raw_reg ! (u32 , 32 , mask_u32) ; raw_reg ! (u64 , 64 , mask_u64) ; # [doc = " Raw register type"]
pub trait RegisterSpec { # [doc = " Raw register type (`u8`, `u16`, `u32`, ...)."]
type Ux : RawReg ; } # [doc = " Trait implemented by readable registers to enable the `read` method."]
# [doc = ""]
# [doc = " Registers marked with `Writable` can be also be `modify`'ed."]
pub trait Readable : RegisterSpec { # [doc = " Result from a call to `read` and argument to `modify`."]
type Reader : From < R < Self > > + core :: ops :: Deref < Target = R < Self > > ; } # [doc = " Trait implemented by writeable registers."]
# [doc = ""]
# [doc = " This enables the  `write`, `write_with_zero` and `reset` methods."]
# [doc = ""]
# [doc = " Registers marked with `Readable` can be also be `modify`'ed."]
pub trait Writable : RegisterSpec { # [doc = " Writer type argument to `write`, et al."]
type Writer : From < W < Self > > + core :: ops :: DerefMut < Target = W < Self > > ; # [doc = " Specifies the register bits that are not changed if you pass `1` and are changed if you pass `0`"]
const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux ; # [doc = " Specifies the register bits that are not changed if you pass `0` and are changed if you pass `1`"]
const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux ; } # [doc = " Reset value of the register."]
# [doc = ""]
# [doc = " This value is the initial value for the `write` method. It can also be directly written to the"]
# [doc = " register by using the `reset` method."]
pub trait Resettable : RegisterSpec { # [doc = " Reset value of the register."]
const RESET_VALUE : Self :: Ux ; # [doc = " Reset value of the register."]
# [inline (always)]
fn reset_value () -> Self :: Ux { Self :: RESET_VALUE } } # [doc = " This structure provides volatile access to registers."]
# [repr (transparent)]
pub struct Reg < REG : RegisterSpec > { register : vcell :: VolatileCell < REG :: Ux > , _marker : marker :: PhantomData < REG > , } unsafe impl < REG : RegisterSpec > Send for Reg < REG > where REG :: Ux : Send { } impl < REG : RegisterSpec > Reg < REG > { # [doc = " Returns the underlying memory address of register."]
# [doc = ""]
# [doc = " ```ignore"]
# [doc = " let reg_ptr = periph.reg.as_ptr();"]
# [doc = " ```"]
# [inline (always)]
pub fn as_ptr (& self) -> * mut REG :: Ux { self . register . as_ptr () } } impl < REG : Readable > Reg < REG > { # [doc = " Reads the contents of a `Readable` register."]
# [doc = ""]
# [doc = " You can read the raw contents of a register by using `bits`:"]
# [doc = " ```ignore"]
# [doc = " let bits = periph.reg.read().bits();"]
# [doc = " ```"]
# [doc = " or get the content of a particular field of a register:"]
# [doc = " ```ignore"]
# [doc = " let reader = periph.reg.read();"]
# [doc = " let bits = reader.field1().bits();"]
# [doc = " let flag = reader.field2().bit_is_set();"]
# [doc = " ```"]
# [inline (always)]
pub fn read (& self) -> REG :: Reader { REG :: Reader :: from (R { bits : self . register . get () , _reg : marker :: PhantomData , }) } } impl < REG : Resettable + Writable > Reg < REG > { # [doc = " Writes the reset value to `Writable` register."]
# [doc = ""]
# [doc = " Resets the register to its initial state."]
# [inline (always)]
pub fn reset (& self) { self . register . set (REG :: RESET_VALUE) } # [doc = " Writes bits to a `Writable` register."]
# [doc = ""]
# [doc = " You can write raw bits into a register:"]
# [doc = " ```ignore"]
# [doc = " periph.reg.write(|w| unsafe { w.bits(rawbits) });"]
# [doc = " ```"]
# [doc = " or write only the fields you need:"]
# [doc = " ```ignore"]
# [doc = " periph.reg.write(|w| w"]
# [doc = "     .field1().bits(newfield1bits)"]
# [doc = "     .field2().set_bit()"]
# [doc = "     .field3().variant(VARIANT)"]
# [doc = " );"]
# [doc = " ```"]
# [doc = " or an alternative way of saying the same:"]
# [doc = " ```ignore"]
# [doc = " periph.reg.write(|w| {"]
# [doc = "     w.field1().bits(newfield1bits);"]
# [doc = "     w.field2().set_bit();"]
# [doc = "     w.field3().variant(VARIANT)"]
# [doc = " });"]
# [doc = " ```"]
# [doc = " In the latter case, other fields will be set to their reset value."]
# [inline (always)]
pub fn write < F > (& self , f : F) where F : FnOnce (& mut REG :: Writer) -> & mut W < REG > , { self . register . set (f (& mut REG :: Writer :: from (W { bits : REG :: RESET_VALUE & ! REG :: ONE_TO_MODIFY_FIELDS_BITMAP | REG :: ZERO_TO_MODIFY_FIELDS_BITMAP , _reg : marker :: PhantomData , })) . bits ,) ; } } impl < REG : Writable > Reg < REG > { # [doc = " Writes 0 to a `Writable` register."]
# [doc = ""]
# [doc = " Similar to `write`, but unused bits will contain 0."]
# [doc = ""]
# [doc = " # Safety"]
# [doc = ""]
# [doc = " Unsafe to use with registers which don't allow to write 0."]
# [inline (always)]
pub unsafe fn write_with_zero < F > (& self , f : F) where F : FnOnce (& mut REG :: Writer) -> & mut W < REG > , { self . register . set (f (& mut REG :: Writer :: from (W { bits : REG :: Ux :: default () , _reg : marker :: PhantomData , })) . bits ,) ; } } impl < REG : Readable + Writable > Reg < REG > { # [doc = " Modifies the contents of the register by reading and then writing it."]
# [doc = ""]
# [doc = " E.g. to do a read-modify-write sequence to change parts of a register:"]
# [doc = " ```ignore"]
# [doc = " periph.reg.modify(|r, w| unsafe { w.bits("]
# [doc = "    r.bits() | 3"]
# [doc = " ) });"]
# [doc = " ```"]
# [doc = " or"]
# [doc = " ```ignore"]
# [doc = " periph.reg.modify(|_, w| w"]
# [doc = "     .field1().bits(newfield1bits)"]
# [doc = "     .field2().set_bit()"]
# [doc = "     .field3().variant(VARIANT)"]
# [doc = " );"]
# [doc = " ```"]
# [doc = " or an alternative way of saying the same:"]
# [doc = " ```ignore"]
# [doc = " periph.reg.modify(|_, w| {"]
# [doc = "     w.field1().bits(newfield1bits);"]
# [doc = "     w.field2().set_bit();"]
# [doc = "     w.field3().variant(VARIANT)"]
# [doc = " });"]
# [doc = " ```"]
# [doc = " Other fields will have the value they had before the call to `modify`."]
# [inline (always)]
pub fn modify < F > (& self , f : F) where for < 'w > F : FnOnce (& REG :: Reader , & 'w mut REG :: Writer) -> & 'w mut W < REG > , { let bits = self . register . get () ; self . register . set (f (& REG :: Reader :: from (R { bits , _reg : marker :: PhantomData , }) , & mut REG :: Writer :: from (W { bits : bits & ! REG :: ONE_TO_MODIFY_FIELDS_BITMAP | REG :: ZERO_TO_MODIFY_FIELDS_BITMAP , _reg : marker :: PhantomData , }) ,) . bits ,) ; } } # [doc = " Register reader."]
# [doc = ""]
# [doc = " Result of the `read` methods of registers. Also used as a closure argument in the `modify`"]
# [doc = " method."]
pub struct R < REG : RegisterSpec + ? Sized > { pub (crate) bits : REG :: Ux , _reg : marker :: PhantomData < REG > , } impl < REG : RegisterSpec > R < REG > { # [doc = " Reads raw bits from register."]
# [inline (always)]
pub fn bits (& self) -> REG :: Ux { self . bits } } impl < REG : RegisterSpec , FI > PartialEq < FI > for R < REG > where REG :: Ux : PartialEq , FI : Copy , REG :: Ux : From < FI > , { # [inline (always)]
fn eq (& self , other : & FI) -> bool { self . bits . eq (& REG :: Ux :: from (* other)) } } # [doc = " Register writer."]
# [doc = ""]
# [doc = " Used as an argument to the closures in the `write` and `modify` methods of the register."]
pub struct W < REG : RegisterSpec + ? Sized > { # [doc = "Writable bits"]
pub (crate) bits : REG :: Ux , _reg : marker :: PhantomData < REG > , } impl < REG : RegisterSpec > W < REG > { # [doc = " Writes raw bits to the register."]
# [doc = ""]
# [doc = " # Safety"]
# [doc = ""]
# [doc = " Read datasheet or reference manual to find what values are allowed to pass."]
# [inline (always)]
pub unsafe fn bits (& mut self , bits : REG :: Ux) -> & mut Self { self . bits = bits ; self } } # [doc (hidden)]
pub struct FieldReaderRaw < U , T > { pub (crate) bits : U , _reg : marker :: PhantomData < T > , } impl < U , FI > FieldReaderRaw < U , FI > where U : Copy , { # [doc = " Creates a new instance of the reader."]
# [allow (unused)]
# [inline (always)]
pub (crate) fn new (bits : U) -> Self { Self { bits , _reg : marker :: PhantomData , } } } # [doc (hidden)]
pub struct BitReaderRaw < T > { pub (crate) bits : bool , _reg : marker :: PhantomData < T > , } impl < FI > BitReaderRaw < FI > { # [doc = " Creates a new instance of the reader."]
# [allow (unused)]
# [inline (always)]
pub (crate) fn new (bits : bool) -> Self { Self { bits , _reg : marker :: PhantomData , } } } # [doc = " Field reader."]
# [doc = ""]
# [doc = " Result of the `read` methods of fields."]
pub type FieldReader < U , FI > = FieldReaderRaw < U , FI > ; # [doc = " Bit-wise field reader"]
pub type BitReader < FI > = BitReaderRaw < FI > ; impl < U , FI > FieldReader < U , FI > where U : Copy , { # [doc = " Reads raw bits from field."]
# [inline (always)]
pub fn bits (& self) -> U { self . bits } } impl < U , FI > PartialEq < FI > for FieldReader < U , FI > where U : PartialEq , FI : Copy , U : From < FI > , { # [inline (always)]
fn eq (& self , other : & FI) -> bool { self . bits . eq (& U :: from (* other)) } } impl < FI > PartialEq < FI > for BitReader < FI > where FI : Copy , bool : From < FI > , { # [inline (always)]
fn eq (& self , other : & FI) -> bool { self . bits . eq (& bool :: from (* other)) } } impl < FI > BitReader < FI > { # [doc = " Value of the field as raw bits."]
# [inline (always)]
pub fn bit (& self) -> bool { self . bits } # [doc = " Returns `true` if the bit is clear (0)."]
# [inline (always)]
pub fn bit_is_clear (& self) -> bool { ! self . bit () } # [doc = " Returns `true` if the bit is set (1)."]
# [inline (always)]
pub fn bit_is_set (& self) -> bool { self . bit () } } # [doc (hidden)]
pub struct Safe ; # [doc (hidden)]
pub struct Unsafe ; # [doc (hidden)]
pub struct FieldWriterRaw < 'a , U , REG , N , FI , Safety , const WI : u8 , const O : u8 > where REG : Writable + RegisterSpec < Ux = U > , N : From < FI > , { pub (crate) w : & 'a mut REG :: Writer , _field : marker :: PhantomData < (N , FI , Safety) > , } impl < 'a , U , REG , N , FI , Safety , const WI : u8 , const O : u8 > FieldWriterRaw < 'a , U , REG , N , FI , Safety , WI , O > where REG : Writable + RegisterSpec < Ux = U > , N : From < FI > , { # [doc = " Creates a new instance of the writer"]
# [allow (unused)]
# [inline (always)]
pub (crate) fn new (w : & 'a mut REG :: Writer) -> Self { Self { w , _field : marker :: PhantomData , } } } # [doc (hidden)]
pub struct BitWriterRaw < 'a , U , REG , FI , M , const O : u8 > where REG : Writable + RegisterSpec < Ux = U > , bool : From < FI > , { pub (crate) w : & 'a mut REG :: Writer , _field : marker :: PhantomData < (FI , M) > , } impl < 'a , U , REG , FI , M , const O : u8 > BitWriterRaw < 'a , U , REG , FI , M , O > where REG : Writable + RegisterSpec < Ux = U > , bool : From < FI > , { # [doc = " Creates a new instance of the writer"]
# [allow (unused)]
# [inline (always)]
pub (crate) fn new (w : & 'a mut REG :: Writer) -> Self { Self { w , _field : marker :: PhantomData , } } } # [doc = " Write field Proxy with unsafe `bits`"]
pub type FieldWriter < 'a , U , REG , N , FI , const WI : u8 , const O : u8 > = FieldWriterRaw < 'a , U , REG , N , FI , Unsafe , WI , O > ; # [doc = " Write field Proxy with safe `bits`"]
pub type FieldWriterSafe < 'a , U , REG , N , FI , const WI : u8 , const O : u8 > = FieldWriterRaw < 'a , U , REG , N , FI , Safe , WI , O > ; impl < 'a , U , REG , N , FI , const WI : u8 , const OF : u8 > FieldWriter < 'a , U , REG , N , FI , WI , OF > where REG : Writable + RegisterSpec < Ux = U > , N : From < FI > , { # [doc = " Field width"]
pub const WIDTH : u8 = WI ; } impl < 'a , U , REG , N , FI , const WI : u8 , const OF : u8 > FieldWriterSafe < 'a , U , REG , N , FI , WI , OF > where REG : Writable + RegisterSpec < Ux = U > , N : From < FI > , { # [doc = " Field width"]
pub const WIDTH : u8 = WI ; } macro_rules ! bit_proxy { ($ writer : ident , $ mwv : ident) => { # [doc (hidden)]
pub struct $ mwv ; # [doc = " Bit-wise write field proxy"]
pub type $ writer <'a , U , REG , FI , const O : u8 > = BitWriterRaw <'a , U , REG , FI , $ mwv , O >; impl <'a , U , REG , FI , const OF : u8 > $ writer <'a , U , REG , FI , OF > where REG : Writable + RegisterSpec < Ux = U >, bool : From < FI >, { # [doc = " Field width"]
pub const WIDTH : u8 = 1 ; } } ; } macro_rules ! impl_bit_proxy { ($ writer : ident) => { impl <'a , U , REG , FI , const OF : u8 > $ writer <'a , U , REG , FI , OF > where REG : Writable + RegisterSpec < Ux = U >, U : RawReg , bool : From < FI >, { # [doc = " Writes bit to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> &'a mut REG :: Writer { self . w . bits &= ! (U :: one () << OF) ; self . w . bits |= (U :: from (value) & U :: one ()) << OF ; self . w } # [doc = " Writes `variant` to the field"]
# [inline (always)]
pub fn variant (self , variant : FI) -> &'a mut REG :: Writer { self . bit (bool :: from (variant)) } } } ; } bit_proxy ! (BitWriter , BitM) ; bit_proxy ! (BitWriter1S , Bit1S) ; bit_proxy ! (BitWriter0C , Bit0C) ; bit_proxy ! (BitWriter1C , Bit1C) ; bit_proxy ! (BitWriter0S , Bit0S) ; bit_proxy ! (BitWriter1T , Bit1T) ; bit_proxy ! (BitWriter0T , Bit0T) ; impl < 'a , U , REG , N , FI , const WI : u8 , const OF : u8 > FieldWriter < 'a , U , REG , N , FI , WI , OF > where REG : Writable + RegisterSpec < Ux = U > , U : RawReg + From < N > , N : From < FI > , { # [doc = " Writes raw bits to the field"]
# [doc = ""]
# [doc = " # Safety"]
# [doc = ""]
# [doc = " Passing incorrect value can cause undefined behaviour. See reference manual"]
# [inline (always)]
pub unsafe fn bits (self , value : N) -> & 'a mut REG :: Writer { self . w . bits &= ! (U :: mask :: < WI > () << OF) ; self . w . bits |= (U :: from (value) & U :: mask :: < WI > ()) << OF ; self . w } # [doc = " Writes `variant` to the field"]
# [inline (always)]
pub fn variant (self , variant : FI) -> & 'a mut REG :: Writer { unsafe { self . bits (N :: from (variant)) } } } impl < 'a , U , REG , N , FI , const WI : u8 , const OF : u8 > FieldWriterSafe < 'a , U , REG , N , FI , WI , OF > where REG : Writable + RegisterSpec < Ux = U > , U : RawReg + From < N > , N : From < FI > , { # [doc = " Writes raw bits to the field"]
# [inline (always)]
pub fn bits (self , value : N) -> & 'a mut REG :: Writer { self . w . bits &= ! (U :: mask :: < WI > () << OF) ; self . w . bits |= (U :: from (value) & U :: mask :: < WI > ()) << OF ; self . w } # [doc = " Writes `variant` to the field"]
# [inline (always)]
pub fn variant (self , variant : FI) -> & 'a mut REG :: Writer { self . bits (N :: from (variant)) } } impl_bit_proxy ! (BitWriter) ; impl_bit_proxy ! (BitWriter1S) ; impl_bit_proxy ! (BitWriter0C) ; impl_bit_proxy ! (BitWriter1C) ; impl_bit_proxy ! (BitWriter0S) ; impl_bit_proxy ! (BitWriter1T) ; impl_bit_proxy ! (BitWriter0T) ; impl < 'a , U , REG , FI , const OF : u8 > BitWriter < 'a , U , REG , FI , OF > where REG : Writable + RegisterSpec < Ux = U > , U : RawReg , bool : From < FI > , { # [doc = " Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut REG :: Writer { self . w . bits |= U :: one () << OF ; self . w } # [doc = " Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut REG :: Writer { self . w . bits &= ! (U :: one () << OF) ; self . w } } impl < 'a , U , REG , FI , const OF : u8 > BitWriter1S < 'a , U , REG , FI , OF > where REG : Writable + RegisterSpec < Ux = U > , U : RawReg , bool : From < FI > , { # [doc = " Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut REG :: Writer { self . w . bits |= U :: one () << OF ; self . w } } impl < 'a , U , REG , FI , const OF : u8 > BitWriter0C < 'a , U , REG , FI , OF > where REG : Writable + RegisterSpec < Ux = U > , U : RawReg , bool : From < FI > , { # [doc = " Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut REG :: Writer { self . w . bits &= ! (U :: one () << OF) ; self . w } } impl < 'a , U , REG , FI , const OF : u8 > BitWriter1C < 'a , U , REG , FI , OF > where REG : Writable + RegisterSpec < Ux = U > , U : RawReg , bool : From < FI > , { # [doc = "Clears the field bit by passing one"]
# [inline (always)]
pub fn clear_bit_by_one (self) -> & 'a mut REG :: Writer { self . w . bits |= U :: one () << OF ; self . w } } impl < 'a , U , REG , FI , const OF : u8 > BitWriter0S < 'a , U , REG , FI , OF > where REG : Writable + RegisterSpec < Ux = U > , U : RawReg , bool : From < FI > , { # [doc = "Sets the field bit by passing zero"]
# [inline (always)]
pub fn set_bit_by_zero (self) -> & 'a mut REG :: Writer { self . w . bits &= ! (U :: one () << OF) ; self . w } } impl < 'a , U , REG , FI , const OF : u8 > BitWriter1T < 'a , U , REG , FI , OF > where REG : Writable + RegisterSpec < Ux = U > , U : RawReg , bool : From < FI > , { # [doc = "Toggle the field bit by passing one"]
# [inline (always)]
pub fn toggle_bit (self) -> & 'a mut REG :: Writer { self . w . bits |= U :: one () << OF ; self . w } } impl < 'a , U , REG , FI , const OF : u8 > BitWriter0T < 'a , U , REG , FI , OF > where REG : Writable + RegisterSpec < Ux = U > , U : RawReg , bool : From < FI > , { # [doc = "Toggle the field bit by passing zero"]
# [inline (always)]
pub fn toggle_bit (self) -> & 'a mut REG :: Writer { self . w . bits &= ! (U :: one () << OF) ; self . w } } } # [cfg (feature = "rt")]
extern "C" { fn UART () ; fn TIMER0 () ; } # [doc (hidden)]
pub union Vector { pub _handler : unsafe extern "C" fn () , pub _reserved : usize , } # [cfg (feature = "rt")]
# [doc (hidden)]
# [no_mangle]
pub static __EXTERNAL_INTERRUPTS : [Vector ; 2]
= [Vector { _handler : UART } , Vector { _handler : TIMER0 } ,]
; # [doc (hidden)]
pub mod interrupt { # [doc = r"Enumeration of all the interrupts."]
# [derive (Copy , Clone , Debug , PartialEq , Eq)]
# [repr (u16)]
pub enum Interrupt { # [doc = "0 - uart"]
UART = 0 , # [doc = "1 - timer0"]
TIMER0 = 1 , } # [doc = r" TryFromInterruptError"]
# [derive (Debug , Copy , Clone)]
pub struct TryFromInterruptError (()) ; impl Interrupt { # [doc = r" Attempt to convert a given value into an `Interrupt`"]
# [inline]
pub fn try_from (value : u8) -> Result < Self , TryFromInterruptError > { match value { 0 => Ok (Interrupt :: UART) , 1 => Ok (Interrupt :: TIMER0) , _ => Err (TryFromInterruptError (())) , } } } # [cfg (feature = "rt")]
# [macro_export]
# [doc = r" Assigns a handler to an interrupt"]
# [doc = r""]
# [doc = r" This macro takes two arguments: the name of an interrupt and the path to the"]
# [doc = r" function that will be used as the handler of that interrupt. That function"]
# [doc = r" must have signature `fn()`."]
# [doc = r""]
# [doc = r" Optionally, a third argument may be used to declare interrupt local data."]
# [doc = r" The handler will have exclusive access to these *local* variables on each"]
# [doc = r" invocation. If the third argument is used then the signature of the handler"]
# [doc = r" function must be `fn(&mut $NAME::Locals)` where `$NAME` is the first argument"]
# [doc = r" passed to the macro."]
# [doc = r""]
# [doc = r" # Example"]
# [doc = r""]
# [doc = r" ``` ignore"]
# [doc = r" interrupt!(TIM2, periodic);"]
# [doc = r""]
# [doc = r" fn periodic() {"]
# [doc = r#"     print!(".");"#]
# [doc = r" }"]
# [doc = r""]
# [doc = r" interrupt!(TIM3, tick, locals: {"]
# [doc = r"     tick: bool = false;"]
# [doc = r" });"]
# [doc = r""]
# [doc = r" fn tick(locals: &mut TIM3::Locals) {"]
# [doc = r"     locals.tick = !locals.tick;"]
# [doc = r""]
# [doc = r"     if locals.tick {"]
# [doc = r#"         println!("Tick");"#]
# [doc = r"     } else {"]
# [doc = r#"         println!("Tock");"#]
# [doc = r"     }"]
# [doc = r" }"]
# [doc = r" ```"]
macro_rules ! interrupt { ($ NAME : ident , $ path : path , locals : { $ ($ lvar : ident : $ lty : ty = $ lval : expr ;) * }) => { # [allow (non_snake_case)]
mod $ NAME { pub struct Locals { $ (pub $ lvar : $ lty ,) * } } # [allow (non_snake_case)]
# [no_mangle]
pub extern "C" fn $ NAME () { let _ = $ crate :: interrupt :: Interrupt :: $ NAME ; static mut LOCALS : self :: $ NAME :: Locals = self :: $ NAME :: Locals { $ ($ lvar : $ lval ,) * } ; let f : fn (& mut self :: $ NAME :: Locals) = $ path ; f (unsafe { & mut LOCALS }) ; } } ; ($ NAME : ident , $ path : path) => { # [allow (non_snake_case)]
# [no_mangle]
pub extern "C" fn $ NAME () { let _ = $ crate :: interrupt :: Interrupt :: $ NAME ; let f : fn () = $ path ; f () ; } } } } pub use self :: interrupt :: Interrupt ; # [doc = "CTRL"]
pub struct CTRL { _marker : PhantomData < * const () > } unsafe impl Send for CTRL { } impl CTRL { # [doc = r"Pointer to the register block"]
pub const PTR : * const ctrl :: RegisterBlock = 0xf000_0000 as * const _ ; # [doc = r"Return the pointer to the register block"]
# [inline (always)]
pub const fn ptr () -> * const ctrl :: RegisterBlock { Self :: PTR } } impl Deref for CTRL { type Target = ctrl :: RegisterBlock ; # [inline (always)]
fn deref (& self) -> & Self :: Target { unsafe { & * Self :: PTR } } } impl core :: fmt :: Debug for CTRL { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("CTRL") . finish () } } # [doc = "CTRL"]
pub mod ctrl { # [doc = r"Register block"]
# [repr (C)]
pub struct RegisterBlock { # [doc = "0x00 - "]
pub reset : RESET , # [doc = "0x04 - Use this register as a scratch space to verify that software read/write accesses to the Wishbone/CSR bus are working correctly. The initial reset value of 0x1234578 can be used to verify endianness."]
pub scratch : SCRATCH , # [doc = "0x08 - Total number of Wishbone bus errors (timeouts) since start."]
pub bus_errors : BUS_ERRORS , } # [doc = "RESET (rw) register accessor: an alias for `Reg<RESET_SPEC>`"]
pub type RESET = crate :: Reg < reset :: RESET_SPEC > ; # [doc = ""]
pub mod reset { # [doc = "Register `RESET` reader"]
pub struct R (crate :: R < RESET_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < RESET_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl From < crate :: R < RESET_SPEC >> for R { # [inline (always)]
fn from (reader : crate :: R < RESET_SPEC >) -> Self { R (reader) } } # [doc = "Register `RESET` writer"]
pub struct W (crate :: W < RESET_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < RESET_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < RESET_SPEC >> for W { # [inline (always)]
fn from (writer : crate :: W < RESET_SPEC >) -> Self { W (writer) } } # [doc = "Field `soc_rst` reader - Write `1` to this register to reset the full SoC (Pulse Reset)"]
pub type SOC_RST_R = crate :: BitReader < bool > ; # [doc = "Field `soc_rst` writer - Write `1` to this register to reset the full SoC (Pulse Reset)"]
pub type SOC_RST_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , RESET_SPEC , bool , O > ; # [doc = "Field `cpu_rst` reader - Write `1` to this register to reset the CPU(s) of the SoC (Hold Reset)"]
pub type CPU_RST_R = crate :: BitReader < bool > ; # [doc = "Field `cpu_rst` writer - Write `1` to this register to reset the CPU(s) of the SoC (Hold Reset)"]
pub type CPU_RST_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , RESET_SPEC , bool , O > ; impl R { # [doc = "Bit 0 - Write `1` to this register to reset the full SoC (Pulse Reset)"]
# [inline (always)]
pub fn soc_rst (& self) -> SOC_RST_R { SOC_RST_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - Write `1` to this register to reset the CPU(s) of the SoC (Hold Reset)"]
# [inline (always)]
pub fn cpu_rst (& self) -> CPU_RST_R { CPU_RST_R :: new (((self . bits >> 1) & 1) != 0) } } impl W { # [doc = "Bit 0 - Write `1` to this register to reset the full SoC (Pulse Reset)"]
# [inline (always)]
# [must_use]
pub fn soc_rst (& mut self) -> SOC_RST_W < 0 > { SOC_RST_W :: new (self) } # [doc = "Bit 1 - Write `1` to this register to reset the CPU(s) of the SoC (Hold Reset)"]
# [inline (always)]
# [must_use]
pub fn cpu_rst (& mut self) -> CPU_RST_W < 1 > { CPU_RST_W :: new (self) } # [doc = "Writes raw bits to the register."]
# [inline (always)]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [reset](index.html) module"]
pub struct RESET_SPEC ; impl crate :: RegisterSpec for RESET_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [reset::R](R) reader structure"]
impl crate :: Readable for RESET_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [reset::W](W) writer structure"]
impl crate :: Writable for RESET_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets RESET to value 0"]
impl crate :: Resettable for RESET_SPEC { const RESET_VALUE : Self :: Ux = 0 ; } } # [doc = "SCRATCH (rw) register accessor: an alias for `Reg<SCRATCH_SPEC>`"]
pub type SCRATCH = crate :: Reg < scratch :: SCRATCH_SPEC > ; # [doc = "Use this register as a scratch space to verify that software read/write accesses to the Wishbone/CSR bus are working correctly. The initial reset value of 0x1234578 can be used to verify endianness."]
pub mod scratch { # [doc = "Register `SCRATCH` reader"]
pub struct R (crate :: R < SCRATCH_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < SCRATCH_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl From < crate :: R < SCRATCH_SPEC >> for R { # [inline (always)]
fn from (reader : crate :: R < SCRATCH_SPEC >) -> Self { R (reader) } } # [doc = "Register `SCRATCH` writer"]
pub struct W (crate :: W < SCRATCH_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < SCRATCH_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < SCRATCH_SPEC >> for W { # [inline (always)]
fn from (writer : crate :: W < SCRATCH_SPEC >) -> Self { W (writer) } } # [doc = "Field `scratch` reader - "]
pub type SCRATCH_R = crate :: FieldReader < u32 , u32 > ; # [doc = "Field `scratch` writer - "]
pub type SCRATCH_W < 'a , const O : u8 > = crate :: FieldWriter < 'a , u32 , SCRATCH_SPEC , u32 , u32 , 32 , O > ; impl R { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn scratch (& self) -> SCRATCH_R { SCRATCH_R :: new (self . bits) } } impl W { # [doc = "Bits 0:31"]
# [inline (always)]
# [must_use]
pub fn scratch (& mut self) -> SCRATCH_W < 0 > { SCRATCH_W :: new (self) } # [doc = "Writes raw bits to the register."]
# [inline (always)]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "Use this register as a scratch space to verify that software read/write accesses to the Wishbone/CSR bus are working correctly. The initial reset value of 0x1234578 can be used to verify endianness.\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [scratch](index.html) module"]
pub struct SCRATCH_SPEC ; impl crate :: RegisterSpec for SCRATCH_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [scratch::R](R) reader structure"]
impl crate :: Readable for SCRATCH_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [scratch::W](W) writer structure"]
impl crate :: Writable for SCRATCH_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets SCRATCH to value 0x1234_5678"]
impl crate :: Resettable for SCRATCH_SPEC { const RESET_VALUE : Self :: Ux = 0x1234_5678 ; } } # [doc = "BUS_ERRORS (rw) register accessor: an alias for `Reg<BUS_ERRORS_SPEC>`"]
pub type BUS_ERRORS = crate :: Reg < bus_errors :: BUS_ERRORS_SPEC > ; # [doc = "Total number of Wishbone bus errors (timeouts) since start."]
pub mod bus_errors { # [doc = "Register `BUS_ERRORS` reader"]
pub struct R (crate :: R < BUS_ERRORS_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < BUS_ERRORS_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl From < crate :: R < BUS_ERRORS_SPEC >> for R { # [inline (always)]
fn from (reader : crate :: R < BUS_ERRORS_SPEC >) -> Self { R (reader) } } # [doc = "Register `BUS_ERRORS` writer"]
pub struct W (crate :: W < BUS_ERRORS_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < BUS_ERRORS_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < BUS_ERRORS_SPEC >> for W { # [inline (always)]
fn from (writer : crate :: W < BUS_ERRORS_SPEC >) -> Self { W (writer) } } # [doc = "Field `bus_errors` reader - "]
pub type BUS_ERRORS_R = crate :: FieldReader < u32 , u32 > ; # [doc = "Field `bus_errors` writer - "]
pub type BUS_ERRORS_W < 'a , const O : u8 > = crate :: FieldWriter < 'a , u32 , BUS_ERRORS_SPEC , u32 , u32 , 32 , O > ; impl R { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn bus_errors (& self) -> BUS_ERRORS_R { BUS_ERRORS_R :: new (self . bits) } } impl W { # [doc = "Bits 0:31"]
# [inline (always)]
# [must_use]
pub fn bus_errors (& mut self) -> BUS_ERRORS_W < 0 > { BUS_ERRORS_W :: new (self) } # [doc = "Writes raw bits to the register."]
# [inline (always)]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "Total number of Wishbone bus errors (timeouts) since start.\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bus_errors](index.html) module"]
pub struct BUS_ERRORS_SPEC ; impl crate :: RegisterSpec for BUS_ERRORS_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [bus_errors::R](R) reader structure"]
impl crate :: Readable for BUS_ERRORS_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [bus_errors::W](W) writer structure"]
impl crate :: Writable for BUS_ERRORS_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets BUS_ERRORS to value 0"]
impl crate :: Resettable for BUS_ERRORS_SPEC { const RESET_VALUE : Self :: Ux = 0 ; } } } # [doc = "IDENTIFIER_MEM"]
pub struct IDENTIFIER_MEM { _marker : PhantomData < * const () > } unsafe impl Send for IDENTIFIER_MEM { } impl IDENTIFIER_MEM { # [doc = r"Pointer to the register block"]
pub const PTR : * const identifier_mem :: RegisterBlock = 0xf000_0800 as * const _ ; # [doc = r"Return the pointer to the register block"]
# [inline (always)]
pub const fn ptr () -> * const identifier_mem :: RegisterBlock { Self :: PTR } } impl Deref for IDENTIFIER_MEM { type Target = identifier_mem :: RegisterBlock ; # [inline (always)]
fn deref (& self) -> & Self :: Target { unsafe { & * Self :: PTR } } } impl core :: fmt :: Debug for IDENTIFIER_MEM { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("IDENTIFIER_MEM") . finish () } } # [doc = "IDENTIFIER_MEM"]
pub mod identifier_mem { # [doc = r"Register block"]
# [repr (C)]
pub struct RegisterBlock { # [doc = "0x00 - 8 x 50-bit memory"]
pub identifier_mem : IDENTIFIER_MEM , } # [doc = "IDENTIFIER_MEM (rw) register accessor: an alias for `Reg<IDENTIFIER_MEM_SPEC>`"]
pub type IDENTIFIER_MEM = crate :: Reg < identifier_mem :: IDENTIFIER_MEM_SPEC > ; # [doc = "8 x 50-bit memory"]
pub mod identifier_mem { # [doc = "Register `IDENTIFIER_MEM` reader"]
pub struct R (crate :: R < IDENTIFIER_MEM_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < IDENTIFIER_MEM_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl From < crate :: R < IDENTIFIER_MEM_SPEC >> for R { # [inline (always)]
fn from (reader : crate :: R < IDENTIFIER_MEM_SPEC >) -> Self { R (reader) } } # [doc = "Register `IDENTIFIER_MEM` writer"]
pub struct W (crate :: W < IDENTIFIER_MEM_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < IDENTIFIER_MEM_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < IDENTIFIER_MEM_SPEC >> for W { # [inline (always)]
fn from (writer : crate :: W < IDENTIFIER_MEM_SPEC >) -> Self { W (writer) } } # [doc = "Field `identifier_mem` reader - "]
pub type IDENTIFIER_MEM_R = crate :: FieldReader < u8 , u8 > ; # [doc = "Field `identifier_mem` writer - "]
pub type IDENTIFIER_MEM_W < 'a , const O : u8 > = crate :: FieldWriter < 'a , u32 , IDENTIFIER_MEM_SPEC , u8 , u8 , 8 , O > ; impl R { # [doc = "Bits 0:7"]
# [inline (always)]
pub fn identifier_mem (& self) -> IDENTIFIER_MEM_R { IDENTIFIER_MEM_R :: new ((self . bits & 0xff) as u8) } } impl W { # [doc = "Bits 0:7"]
# [inline (always)]
# [must_use]
pub fn identifier_mem (& mut self) -> IDENTIFIER_MEM_W < 0 > { IDENTIFIER_MEM_W :: new (self) } # [doc = "Writes raw bits to the register."]
# [inline (always)]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "8 x 50-bit memory\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [identifier_mem](index.html) module"]
pub struct IDENTIFIER_MEM_SPEC ; impl crate :: RegisterSpec for IDENTIFIER_MEM_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [identifier_mem::R](R) reader structure"]
impl crate :: Readable for IDENTIFIER_MEM_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [identifier_mem::W](W) writer structure"]
impl crate :: Writable for IDENTIFIER_MEM_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets IDENTIFIER_MEM to value 0"]
impl crate :: Resettable for IDENTIFIER_MEM_SPEC { const RESET_VALUE : Self :: Ux = 0 ; } } } # [doc = "LEDS"]
pub struct LEDS { _marker : PhantomData < * const () > } unsafe impl Send for LEDS { } impl LEDS { # [doc = r"Pointer to the register block"]
pub const PTR : * const leds :: RegisterBlock = 0xf000_1000 as * const _ ; # [doc = r"Return the pointer to the register block"]
# [inline (always)]
pub const fn ptr () -> * const leds :: RegisterBlock { Self :: PTR } } impl Deref for LEDS { type Target = leds :: RegisterBlock ; # [inline (always)]
fn deref (& self) -> & Self :: Target { unsafe { & * Self :: PTR } } } impl core :: fmt :: Debug for LEDS { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("LEDS") . finish () } } # [doc = "LEDS"]
pub mod leds { # [doc = r"Register block"]
# [repr (C)]
pub struct RegisterBlock { # [doc = "0x00 - Led Output(s) Control."]
pub out : OUT , } # [doc = "OUT (rw) register accessor: an alias for `Reg<OUT_SPEC>`"]
pub type OUT = crate :: Reg < out :: OUT_SPEC > ; # [doc = "Led Output(s) Control."]
pub mod out { # [doc = "Register `OUT` reader"]
pub struct R (crate :: R < OUT_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < OUT_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl From < crate :: R < OUT_SPEC >> for R { # [inline (always)]
fn from (reader : crate :: R < OUT_SPEC >) -> Self { R (reader) } } # [doc = "Register `OUT` writer"]
pub struct W (crate :: W < OUT_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < OUT_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < OUT_SPEC >> for W { # [inline (always)]
fn from (writer : crate :: W < OUT_SPEC >) -> Self { W (writer) } } # [doc = "Field `out` reader - "]
pub type OUT_R = crate :: FieldReader < u8 , u8 > ; # [doc = "Field `out` writer - "]
pub type OUT_W < 'a , const O : u8 > = crate :: FieldWriter < 'a , u32 , OUT_SPEC , u8 , u8 , 3 , O > ; impl R { # [doc = "Bits 0:2"]
# [inline (always)]
pub fn out (& self) -> OUT_R { OUT_R :: new ((self . bits & 7) as u8) } } impl W { # [doc = "Bits 0:2"]
# [inline (always)]
# [must_use]
pub fn out (& mut self) -> OUT_W < 0 > { OUT_W :: new (self) } # [doc = "Writes raw bits to the register."]
# [inline (always)]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "Led Output(s) Control.\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [out](index.html) module"]
pub struct OUT_SPEC ; impl crate :: RegisterSpec for OUT_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [out::R](R) reader structure"]
impl crate :: Readable for OUT_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [out::W](W) writer structure"]
impl crate :: Writable for OUT_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets OUT to value 0"]
impl crate :: Resettable for OUT_SPEC { const RESET_VALUE : Self :: Ux = 0 ; } } } # [doc = "SPIFLASH_CORE"]
pub struct SPIFLASH_CORE { _marker : PhantomData < * const () > } unsafe impl Send for SPIFLASH_CORE { } impl SPIFLASH_CORE { # [doc = r"Pointer to the register block"]
pub const PTR : * const spiflash_core :: RegisterBlock = 0xf000_1800 as * const _ ; # [doc = r"Return the pointer to the register block"]
# [inline (always)]
pub const fn ptr () -> * const spiflash_core :: RegisterBlock { Self :: PTR } } impl Deref for SPIFLASH_CORE { type Target = spiflash_core :: RegisterBlock ; # [inline (always)]
fn deref (& self) -> & Self :: Target { unsafe { & * Self :: PTR } } } impl core :: fmt :: Debug for SPIFLASH_CORE { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("SPIFLASH_CORE") . finish () } } # [doc = "SPIFLASH_CORE"]
pub mod spiflash_core { # [doc = r"Register block"]
# [repr (C)]
pub struct RegisterBlock { # [doc = "0x00 - "]
pub mmap_dummy_bits : MMAP_DUMMY_BITS , } # [doc = "MMAP_DUMMY_BITS (rw) register accessor: an alias for `Reg<MMAP_DUMMY_BITS_SPEC>`"]
pub type MMAP_DUMMY_BITS = crate :: Reg < mmap_dummy_bits :: MMAP_DUMMY_BITS_SPEC > ; # [doc = ""]
pub mod mmap_dummy_bits { # [doc = "Register `MMAP_DUMMY_BITS` reader"]
pub struct R (crate :: R < MMAP_DUMMY_BITS_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < MMAP_DUMMY_BITS_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl From < crate :: R < MMAP_DUMMY_BITS_SPEC >> for R { # [inline (always)]
fn from (reader : crate :: R < MMAP_DUMMY_BITS_SPEC >) -> Self { R (reader) } } # [doc = "Register `MMAP_DUMMY_BITS` writer"]
pub struct W (crate :: W < MMAP_DUMMY_BITS_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < MMAP_DUMMY_BITS_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < MMAP_DUMMY_BITS_SPEC >> for W { # [inline (always)]
fn from (writer : crate :: W < MMAP_DUMMY_BITS_SPEC >) -> Self { W (writer) } } # [doc = "Field `mmap_dummy_bits` reader - "]
pub type MMAP_DUMMY_BITS_R = crate :: FieldReader < u8 , u8 > ; # [doc = "Field `mmap_dummy_bits` writer - "]
pub type MMAP_DUMMY_BITS_W < 'a , const O : u8 > = crate :: FieldWriter < 'a , u32 , MMAP_DUMMY_BITS_SPEC , u8 , u8 , 8 , O > ; impl R { # [doc = "Bits 0:7"]
# [inline (always)]
pub fn mmap_dummy_bits (& self) -> MMAP_DUMMY_BITS_R { MMAP_DUMMY_BITS_R :: new ((self . bits & 0xff) as u8) } } impl W { # [doc = "Bits 0:7"]
# [inline (always)]
# [must_use]
pub fn mmap_dummy_bits (& mut self) -> MMAP_DUMMY_BITS_W < 0 > { MMAP_DUMMY_BITS_W :: new (self) } # [doc = "Writes raw bits to the register."]
# [inline (always)]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mmap_dummy_bits](index.html) module"]
pub struct MMAP_DUMMY_BITS_SPEC ; impl crate :: RegisterSpec for MMAP_DUMMY_BITS_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [mmap_dummy_bits::R](R) reader structure"]
impl crate :: Readable for MMAP_DUMMY_BITS_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [mmap_dummy_bits::W](W) writer structure"]
impl crate :: Writable for MMAP_DUMMY_BITS_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets MMAP_DUMMY_BITS to value 0"]
impl crate :: Resettable for MMAP_DUMMY_BITS_SPEC { const RESET_VALUE : Self :: Ux = 0 ; } } } # [doc = "SPIFLASH_PHY"]
pub struct SPIFLASH_PHY { _marker : PhantomData < * const () > } unsafe impl Send for SPIFLASH_PHY { } impl SPIFLASH_PHY { # [doc = r"Pointer to the register block"]
pub const PTR : * const spiflash_phy :: RegisterBlock = 0xf000_2000 as * const _ ; # [doc = r"Return the pointer to the register block"]
# [inline (always)]
pub const fn ptr () -> * const spiflash_phy :: RegisterBlock { Self :: PTR } } impl Deref for SPIFLASH_PHY { type Target = spiflash_phy :: RegisterBlock ; # [inline (always)]
fn deref (& self) -> & Self :: Target { unsafe { & * Self :: PTR } } } impl core :: fmt :: Debug for SPIFLASH_PHY { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("SPIFLASH_PHY") . finish () } } # [doc = "SPIFLASH_PHY"]
pub mod spiflash_phy { # [doc = r"Register block"]
# [repr (C)]
pub struct RegisterBlock { # [doc = "0x00 - "]
pub clk_divisor : CLK_DIVISOR , } # [doc = "CLK_DIVISOR (rw) register accessor: an alias for `Reg<CLK_DIVISOR_SPEC>`"]
pub type CLK_DIVISOR = crate :: Reg < clk_divisor :: CLK_DIVISOR_SPEC > ; # [doc = ""]
pub mod clk_divisor { # [doc = "Register `CLK_DIVISOR` reader"]
pub struct R (crate :: R < CLK_DIVISOR_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < CLK_DIVISOR_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl From < crate :: R < CLK_DIVISOR_SPEC >> for R { # [inline (always)]
fn from (reader : crate :: R < CLK_DIVISOR_SPEC >) -> Self { R (reader) } } # [doc = "Register `CLK_DIVISOR` writer"]
pub struct W (crate :: W < CLK_DIVISOR_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < CLK_DIVISOR_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < CLK_DIVISOR_SPEC >> for W { # [inline (always)]
fn from (writer : crate :: W < CLK_DIVISOR_SPEC >) -> Self { W (writer) } } # [doc = "Field `clk_divisor` reader - "]
pub type CLK_DIVISOR_R = crate :: FieldReader < u8 , u8 > ; # [doc = "Field `clk_divisor` writer - "]
pub type CLK_DIVISOR_W < 'a , const O : u8 > = crate :: FieldWriter < 'a , u32 , CLK_DIVISOR_SPEC , u8 , u8 , 8 , O > ; impl R { # [doc = "Bits 0:7"]
# [inline (always)]
pub fn clk_divisor (& self) -> CLK_DIVISOR_R { CLK_DIVISOR_R :: new ((self . bits & 0xff) as u8) } } impl W { # [doc = "Bits 0:7"]
# [inline (always)]
# [must_use]
pub fn clk_divisor (& mut self) -> CLK_DIVISOR_W < 0 > { CLK_DIVISOR_W :: new (self) } # [doc = "Writes raw bits to the register."]
# [inline (always)]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [clk_divisor](index.html) module"]
pub struct CLK_DIVISOR_SPEC ; impl crate :: RegisterSpec for CLK_DIVISOR_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [clk_divisor::R](R) reader structure"]
impl crate :: Readable for CLK_DIVISOR_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [clk_divisor::W](W) writer structure"]
impl crate :: Writable for CLK_DIVISOR_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets CLK_DIVISOR to value 0x01"]
impl crate :: Resettable for CLK_DIVISOR_SPEC { const RESET_VALUE : Self :: Ux = 0x01 ; } } } # [doc = "TIMER0"]
pub struct TIMER0 { _marker : PhantomData < * const () > } unsafe impl Send for TIMER0 { } impl TIMER0 { # [doc = r"Pointer to the register block"]
pub const PTR : * const timer0 :: RegisterBlock = 0xf000_2800 as * const _ ; # [doc = r"Return the pointer to the register block"]
# [inline (always)]
pub const fn ptr () -> * const timer0 :: RegisterBlock { Self :: PTR } } impl Deref for TIMER0 { type Target = timer0 :: RegisterBlock ; # [inline (always)]
fn deref (& self) -> & Self :: Target { unsafe { & * Self :: PTR } } } impl core :: fmt :: Debug for TIMER0 { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("TIMER0") . finish () } } # [doc = "TIMER0"]
pub mod timer0 { # [doc = r"Register block"]
# [repr (C)]
pub struct RegisterBlock { # [doc = "0x00 - Load value when Timer is (re-)enabled. In One-Shot mode, the value written to this register specifies the Timer's duration in clock cycles."]
pub load : LOAD , # [doc = "0x04 - Reload value when Timer reaches ``0``. In Periodic mode, the value written to this register specify the Timer's period in clock cycles."]
pub reload : RELOAD , # [doc = "0x08 - Enable flag of the Timer. Set this flag to ``1`` to enable/start the Timer. Set to ``0`` to disable the Timer."]
pub en : EN , # [doc = "0x0c - Update trigger for the current countdown value. A write to this register latches the current countdown value to ``value`` register."]
pub update_value : UPDATE_VALUE , # [doc = "0x10 - Latched countdown value. This value is updated by writing to ``update_value``."]
pub value : VALUE , # [doc = "0x14 - This register contains the current raw level of the zero event trigger. Writes to this register have no effect."]
pub ev_status : EV_STATUS , # [doc = "0x18 - When a zero event occurs, the corresponding bit will be set in this register. To clear the Event, set the corresponding bit in this register."]
pub ev_pending : EV_PENDING , # [doc = "0x1c - This register enables the corresponding zero events. Write a ``0`` to this register to disable individual events."]
pub ev_enable : EV_ENABLE , # [doc = "0x20 - Write a ``1`` to latch current Uptime cycles to ``uptime_cycles`` register."]
pub uptime_latch : UPTIME_LATCH , # [doc = "0x24 - Bits 32-63 of `TIMER0_UPTIME_CYCLES`. Latched Uptime since power-up (in ``sys_clk`` cycles)."]
pub uptime_cycles1 : UPTIME_CYCLES1 , # [doc = "0x28 - Bits 0-31 of `TIMER0_UPTIME_CYCLES`."]
pub uptime_cycles0 : UPTIME_CYCLES0 , } # [doc = "LOAD (rw) register accessor: an alias for `Reg<LOAD_SPEC>`"]
pub type LOAD = crate :: Reg < load :: LOAD_SPEC > ; # [doc = "Load value when Timer is (re-)enabled. In One-Shot mode, the value written to this register specifies the Timer's duration in clock cycles."]
pub mod load { # [doc = "Register `LOAD` reader"]
pub struct R (crate :: R < LOAD_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < LOAD_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl From < crate :: R < LOAD_SPEC >> for R { # [inline (always)]
fn from (reader : crate :: R < LOAD_SPEC >) -> Self { R (reader) } } # [doc = "Register `LOAD` writer"]
pub struct W (crate :: W < LOAD_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < LOAD_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < LOAD_SPEC >> for W { # [inline (always)]
fn from (writer : crate :: W < LOAD_SPEC >) -> Self { W (writer) } } # [doc = "Field `load` reader - "]
pub type LOAD_R = crate :: FieldReader < u32 , u32 > ; # [doc = "Field `load` writer - "]
pub type LOAD_W < 'a , const O : u8 > = crate :: FieldWriter < 'a , u32 , LOAD_SPEC , u32 , u32 , 32 , O > ; impl R { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn load (& self) -> LOAD_R { LOAD_R :: new (self . bits) } } impl W { # [doc = "Bits 0:31"]
# [inline (always)]
# [must_use]
pub fn load (& mut self) -> LOAD_W < 0 > { LOAD_W :: new (self) } # [doc = "Writes raw bits to the register."]
# [inline (always)]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "Load value when Timer is (re-)enabled. In One-Shot mode, the value written to this register specifies the Timer's duration in clock cycles.\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [load](index.html) module"]
pub struct LOAD_SPEC ; impl crate :: RegisterSpec for LOAD_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [load::R](R) reader structure"]
impl crate :: Readable for LOAD_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [load::W](W) writer structure"]
impl crate :: Writable for LOAD_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets LOAD to value 0"]
impl crate :: Resettable for LOAD_SPEC { const RESET_VALUE : Self :: Ux = 0 ; } } # [doc = "RELOAD (rw) register accessor: an alias for `Reg<RELOAD_SPEC>`"]
pub type RELOAD = crate :: Reg < reload :: RELOAD_SPEC > ; # [doc = "Reload value when Timer reaches ``0``. In Periodic mode, the value written to this register specify the Timer's period in clock cycles."]
pub mod reload { # [doc = "Register `RELOAD` reader"]
pub struct R (crate :: R < RELOAD_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < RELOAD_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl From < crate :: R < RELOAD_SPEC >> for R { # [inline (always)]
fn from (reader : crate :: R < RELOAD_SPEC >) -> Self { R (reader) } } # [doc = "Register `RELOAD` writer"]
pub struct W (crate :: W < RELOAD_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < RELOAD_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < RELOAD_SPEC >> for W { # [inline (always)]
fn from (writer : crate :: W < RELOAD_SPEC >) -> Self { W (writer) } } # [doc = "Field `reload` reader - "]
pub type RELOAD_R = crate :: FieldReader < u32 , u32 > ; # [doc = "Field `reload` writer - "]
pub type RELOAD_W < 'a , const O : u8 > = crate :: FieldWriter < 'a , u32 , RELOAD_SPEC , u32 , u32 , 32 , O > ; impl R { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn reload (& self) -> RELOAD_R { RELOAD_R :: new (self . bits) } } impl W { # [doc = "Bits 0:31"]
# [inline (always)]
# [must_use]
pub fn reload (& mut self) -> RELOAD_W < 0 > { RELOAD_W :: new (self) } # [doc = "Writes raw bits to the register."]
# [inline (always)]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "Reload value when Timer reaches ``0``. In Periodic mode, the value written to this register specify the Timer's period in clock cycles.\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [reload](index.html) module"]
pub struct RELOAD_SPEC ; impl crate :: RegisterSpec for RELOAD_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [reload::R](R) reader structure"]
impl crate :: Readable for RELOAD_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [reload::W](W) writer structure"]
impl crate :: Writable for RELOAD_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets RELOAD to value 0"]
impl crate :: Resettable for RELOAD_SPEC { const RESET_VALUE : Self :: Ux = 0 ; } } # [doc = "EN (rw) register accessor: an alias for `Reg<EN_SPEC>`"]
pub type EN = crate :: Reg < en :: EN_SPEC > ; # [doc = "Enable flag of the Timer. Set this flag to ``1`` to enable/start the Timer. Set to ``0`` to disable the Timer."]
pub mod en { # [doc = "Register `EN` reader"]
pub struct R (crate :: R < EN_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < EN_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl From < crate :: R < EN_SPEC >> for R { # [inline (always)]
fn from (reader : crate :: R < EN_SPEC >) -> Self { R (reader) } } # [doc = "Register `EN` writer"]
pub struct W (crate :: W < EN_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < EN_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < EN_SPEC >> for W { # [inline (always)]
fn from (writer : crate :: W < EN_SPEC >) -> Self { W (writer) } } # [doc = "Field `en` reader - "]
pub type EN_R = crate :: BitReader < bool > ; # [doc = "Field `en` writer - "]
pub type EN_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , EN_SPEC , bool , O > ; impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn en (& self) -> EN_R { EN_R :: new ((self . bits & 1) != 0) } } impl W { # [doc = "Bit 0"]
# [inline (always)]
# [must_use]
pub fn en (& mut self) -> EN_W < 0 > { EN_W :: new (self) } # [doc = "Writes raw bits to the register."]
# [inline (always)]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "Enable flag of the Timer. Set this flag to ``1`` to enable/start the Timer. Set to ``0`` to disable the Timer.\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [en](index.html) module"]
pub struct EN_SPEC ; impl crate :: RegisterSpec for EN_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [en::R](R) reader structure"]
impl crate :: Readable for EN_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [en::W](W) writer structure"]
impl crate :: Writable for EN_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets EN to value 0"]
impl crate :: Resettable for EN_SPEC { const RESET_VALUE : Self :: Ux = 0 ; } } # [doc = "UPDATE_VALUE (rw) register accessor: an alias for `Reg<UPDATE_VALUE_SPEC>`"]
pub type UPDATE_VALUE = crate :: Reg < update_value :: UPDATE_VALUE_SPEC > ; # [doc = "Update trigger for the current countdown value. A write to this register latches the current countdown value to ``value`` register."]
pub mod update_value { # [doc = "Register `UPDATE_VALUE` reader"]
pub struct R (crate :: R < UPDATE_VALUE_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < UPDATE_VALUE_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl From < crate :: R < UPDATE_VALUE_SPEC >> for R { # [inline (always)]
fn from (reader : crate :: R < UPDATE_VALUE_SPEC >) -> Self { R (reader) } } # [doc = "Register `UPDATE_VALUE` writer"]
pub struct W (crate :: W < UPDATE_VALUE_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < UPDATE_VALUE_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < UPDATE_VALUE_SPEC >> for W { # [inline (always)]
fn from (writer : crate :: W < UPDATE_VALUE_SPEC >) -> Self { W (writer) } } # [doc = "Field `update_value` reader - "]
pub type UPDATE_VALUE_R = crate :: BitReader < bool > ; # [doc = "Field `update_value` writer - "]
pub type UPDATE_VALUE_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , UPDATE_VALUE_SPEC , bool , O > ; impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn update_value (& self) -> UPDATE_VALUE_R { UPDATE_VALUE_R :: new ((self . bits & 1) != 0) } } impl W { # [doc = "Bit 0"]
# [inline (always)]
# [must_use]
pub fn update_value (& mut self) -> UPDATE_VALUE_W < 0 > { UPDATE_VALUE_W :: new (self) } # [doc = "Writes raw bits to the register."]
# [inline (always)]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "Update trigger for the current countdown value. A write to this register latches the current countdown value to ``value`` register.\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [update_value](index.html) module"]
pub struct UPDATE_VALUE_SPEC ; impl crate :: RegisterSpec for UPDATE_VALUE_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [update_value::R](R) reader structure"]
impl crate :: Readable for UPDATE_VALUE_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [update_value::W](W) writer structure"]
impl crate :: Writable for UPDATE_VALUE_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets UPDATE_VALUE to value 0"]
impl crate :: Resettable for UPDATE_VALUE_SPEC { const RESET_VALUE : Self :: Ux = 0 ; } } # [doc = "VALUE (rw) register accessor: an alias for `Reg<VALUE_SPEC>`"]
pub type VALUE = crate :: Reg < value :: VALUE_SPEC > ; # [doc = "Latched countdown value. This value is updated by writing to ``update_value``."]
pub mod value { # [doc = "Register `VALUE` reader"]
pub struct R (crate :: R < VALUE_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < VALUE_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl From < crate :: R < VALUE_SPEC >> for R { # [inline (always)]
fn from (reader : crate :: R < VALUE_SPEC >) -> Self { R (reader) } } # [doc = "Register `VALUE` writer"]
pub struct W (crate :: W < VALUE_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < VALUE_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < VALUE_SPEC >> for W { # [inline (always)]
fn from (writer : crate :: W < VALUE_SPEC >) -> Self { W (writer) } } # [doc = "Field `value` reader - "]
pub type VALUE_R = crate :: FieldReader < u32 , u32 > ; # [doc = "Field `value` writer - "]
pub type VALUE_W < 'a , const O : u8 > = crate :: FieldWriter < 'a , u32 , VALUE_SPEC , u32 , u32 , 32 , O > ; impl R { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn value (& self) -> VALUE_R { VALUE_R :: new (self . bits) } } impl W { # [doc = "Bits 0:31"]
# [inline (always)]
# [must_use]
pub fn value (& mut self) -> VALUE_W < 0 > { VALUE_W :: new (self) } # [doc = "Writes raw bits to the register."]
# [inline (always)]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "Latched countdown value. This value is updated by writing to ``update_value``.\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [value](index.html) module"]
pub struct VALUE_SPEC ; impl crate :: RegisterSpec for VALUE_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [value::R](R) reader structure"]
impl crate :: Readable for VALUE_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [value::W](W) writer structure"]
impl crate :: Writable for VALUE_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets VALUE to value 0"]
impl crate :: Resettable for VALUE_SPEC { const RESET_VALUE : Self :: Ux = 0 ; } } # [doc = "EV_STATUS (rw) register accessor: an alias for `Reg<EV_STATUS_SPEC>`"]
pub type EV_STATUS = crate :: Reg < ev_status :: EV_STATUS_SPEC > ; # [doc = "This register contains the current raw level of the zero event trigger. Writes to this register have no effect."]
pub mod ev_status { # [doc = "Register `EV_STATUS` reader"]
pub struct R (crate :: R < EV_STATUS_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < EV_STATUS_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl From < crate :: R < EV_STATUS_SPEC >> for R { # [inline (always)]
fn from (reader : crate :: R < EV_STATUS_SPEC >) -> Self { R (reader) } } # [doc = "Register `EV_STATUS` writer"]
pub struct W (crate :: W < EV_STATUS_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < EV_STATUS_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < EV_STATUS_SPEC >> for W { # [inline (always)]
fn from (writer : crate :: W < EV_STATUS_SPEC >) -> Self { W (writer) } } # [doc = "Field `zero` reader - Level of the ``zero`` event"]
pub type ZERO_R = crate :: BitReader < bool > ; # [doc = "Field `zero` writer - Level of the ``zero`` event"]
pub type ZERO_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , EV_STATUS_SPEC , bool , O > ; impl R { # [doc = "Bit 0 - Level of the ``zero`` event"]
# [inline (always)]
pub fn zero (& self) -> ZERO_R { ZERO_R :: new ((self . bits & 1) != 0) } } impl W { # [doc = "Bit 0 - Level of the ``zero`` event"]
# [inline (always)]
# [must_use]
pub fn zero (& mut self) -> ZERO_W < 0 > { ZERO_W :: new (self) } # [doc = "Writes raw bits to the register."]
# [inline (always)]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "This register contains the current raw level of the zero event trigger. Writes to this register have no effect.\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ev_status](index.html) module"]
pub struct EV_STATUS_SPEC ; impl crate :: RegisterSpec for EV_STATUS_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [ev_status::R](R) reader structure"]
impl crate :: Readable for EV_STATUS_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [ev_status::W](W) writer structure"]
impl crate :: Writable for EV_STATUS_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets EV_STATUS to value 0"]
impl crate :: Resettable for EV_STATUS_SPEC { const RESET_VALUE : Self :: Ux = 0 ; } } # [doc = "EV_PENDING (rw) register accessor: an alias for `Reg<EV_PENDING_SPEC>`"]
pub type EV_PENDING = crate :: Reg < ev_pending :: EV_PENDING_SPEC > ; # [doc = "When a zero event occurs, the corresponding bit will be set in this register. To clear the Event, set the corresponding bit in this register."]
pub mod ev_pending { # [doc = "Register `EV_PENDING` reader"]
pub struct R (crate :: R < EV_PENDING_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < EV_PENDING_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl From < crate :: R < EV_PENDING_SPEC >> for R { # [inline (always)]
fn from (reader : crate :: R < EV_PENDING_SPEC >) -> Self { R (reader) } } # [doc = "Register `EV_PENDING` writer"]
pub struct W (crate :: W < EV_PENDING_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < EV_PENDING_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < EV_PENDING_SPEC >> for W { # [inline (always)]
fn from (writer : crate :: W < EV_PENDING_SPEC >) -> Self { W (writer) } } # [doc = "Field `zero` reader - `1` if a `zero` event occurred. This Event is triggered on a **falling** edge."]
pub type ZERO_R = crate :: BitReader < bool > ; # [doc = "Field `zero` writer - `1` if a `zero` event occurred. This Event is triggered on a **falling** edge."]
pub type ZERO_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , EV_PENDING_SPEC , bool , O > ; impl R { # [doc = "Bit 0 - `1` if a `zero` event occurred. This Event is triggered on a **falling** edge."]
# [inline (always)]
pub fn zero (& self) -> ZERO_R { ZERO_R :: new ((self . bits & 1) != 0) } } impl W { # [doc = "Bit 0 - `1` if a `zero` event occurred. This Event is triggered on a **falling** edge."]
# [inline (always)]
# [must_use]
pub fn zero (& mut self) -> ZERO_W < 0 > { ZERO_W :: new (self) } # [doc = "Writes raw bits to the register."]
# [inline (always)]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "When a zero event occurs, the corresponding bit will be set in this register. To clear the Event, set the corresponding bit in this register.\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ev_pending](index.html) module"]
pub struct EV_PENDING_SPEC ; impl crate :: RegisterSpec for EV_PENDING_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [ev_pending::R](R) reader structure"]
impl crate :: Readable for EV_PENDING_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [ev_pending::W](W) writer structure"]
impl crate :: Writable for EV_PENDING_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets EV_PENDING to value 0"]
impl crate :: Resettable for EV_PENDING_SPEC { const RESET_VALUE : Self :: Ux = 0 ; } } # [doc = "EV_ENABLE (rw) register accessor: an alias for `Reg<EV_ENABLE_SPEC>`"]
pub type EV_ENABLE = crate :: Reg < ev_enable :: EV_ENABLE_SPEC > ; # [doc = "This register enables the corresponding zero events. Write a ``0`` to this register to disable individual events."]
pub mod ev_enable { # [doc = "Register `EV_ENABLE` reader"]
pub struct R (crate :: R < EV_ENABLE_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < EV_ENABLE_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl From < crate :: R < EV_ENABLE_SPEC >> for R { # [inline (always)]
fn from (reader : crate :: R < EV_ENABLE_SPEC >) -> Self { R (reader) } } # [doc = "Register `EV_ENABLE` writer"]
pub struct W (crate :: W < EV_ENABLE_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < EV_ENABLE_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < EV_ENABLE_SPEC >> for W { # [inline (always)]
fn from (writer : crate :: W < EV_ENABLE_SPEC >) -> Self { W (writer) } } # [doc = "Field `zero` reader - Write a ``1`` to enable the ``zero`` Event"]
pub type ZERO_R = crate :: BitReader < bool > ; # [doc = "Field `zero` writer - Write a ``1`` to enable the ``zero`` Event"]
pub type ZERO_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , EV_ENABLE_SPEC , bool , O > ; impl R { # [doc = "Bit 0 - Write a ``1`` to enable the ``zero`` Event"]
# [inline (always)]
pub fn zero (& self) -> ZERO_R { ZERO_R :: new ((self . bits & 1) != 0) } } impl W { # [doc = "Bit 0 - Write a ``1`` to enable the ``zero`` Event"]
# [inline (always)]
# [must_use]
pub fn zero (& mut self) -> ZERO_W < 0 > { ZERO_W :: new (self) } # [doc = "Writes raw bits to the register."]
# [inline (always)]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "This register enables the corresponding zero events. Write a ``0`` to this register to disable individual events.\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ev_enable](index.html) module"]
pub struct EV_ENABLE_SPEC ; impl crate :: RegisterSpec for EV_ENABLE_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [ev_enable::R](R) reader structure"]
impl crate :: Readable for EV_ENABLE_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [ev_enable::W](W) writer structure"]
impl crate :: Writable for EV_ENABLE_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets EV_ENABLE to value 0"]
impl crate :: Resettable for EV_ENABLE_SPEC { const RESET_VALUE : Self :: Ux = 0 ; } } # [doc = "UPTIME_LATCH (rw) register accessor: an alias for `Reg<UPTIME_LATCH_SPEC>`"]
pub type UPTIME_LATCH = crate :: Reg < uptime_latch :: UPTIME_LATCH_SPEC > ; # [doc = "Write a ``1`` to latch current Uptime cycles to ``uptime_cycles`` register."]
pub mod uptime_latch { # [doc = "Register `UPTIME_LATCH` reader"]
pub struct R (crate :: R < UPTIME_LATCH_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < UPTIME_LATCH_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl From < crate :: R < UPTIME_LATCH_SPEC >> for R { # [inline (always)]
fn from (reader : crate :: R < UPTIME_LATCH_SPEC >) -> Self { R (reader) } } # [doc = "Register `UPTIME_LATCH` writer"]
pub struct W (crate :: W < UPTIME_LATCH_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < UPTIME_LATCH_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < UPTIME_LATCH_SPEC >> for W { # [inline (always)]
fn from (writer : crate :: W < UPTIME_LATCH_SPEC >) -> Self { W (writer) } } # [doc = "Field `uptime_latch` reader - "]
pub type UPTIME_LATCH_R = crate :: BitReader < bool > ; # [doc = "Field `uptime_latch` writer - "]
pub type UPTIME_LATCH_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , UPTIME_LATCH_SPEC , bool , O > ; impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn uptime_latch (& self) -> UPTIME_LATCH_R { UPTIME_LATCH_R :: new ((self . bits & 1) != 0) } } impl W { # [doc = "Bit 0"]
# [inline (always)]
# [must_use]
pub fn uptime_latch (& mut self) -> UPTIME_LATCH_W < 0 > { UPTIME_LATCH_W :: new (self) } # [doc = "Writes raw bits to the register."]
# [inline (always)]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "Write a ``1`` to latch current Uptime cycles to ``uptime_cycles`` register.\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [uptime_latch](index.html) module"]
pub struct UPTIME_LATCH_SPEC ; impl crate :: RegisterSpec for UPTIME_LATCH_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [uptime_latch::R](R) reader structure"]
impl crate :: Readable for UPTIME_LATCH_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [uptime_latch::W](W) writer structure"]
impl crate :: Writable for UPTIME_LATCH_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets UPTIME_LATCH to value 0"]
impl crate :: Resettable for UPTIME_LATCH_SPEC { const RESET_VALUE : Self :: Ux = 0 ; } } # [doc = "UPTIME_CYCLES1 (rw) register accessor: an alias for `Reg<UPTIME_CYCLES1_SPEC>`"]
pub type UPTIME_CYCLES1 = crate :: Reg < uptime_cycles1 :: UPTIME_CYCLES1_SPEC > ; # [doc = "Bits 32-63 of `TIMER0_UPTIME_CYCLES`. Latched Uptime since power-up (in ``sys_clk`` cycles)."]
pub mod uptime_cycles1 { # [doc = "Register `UPTIME_CYCLES1` reader"]
pub struct R (crate :: R < UPTIME_CYCLES1_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < UPTIME_CYCLES1_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl From < crate :: R < UPTIME_CYCLES1_SPEC >> for R { # [inline (always)]
fn from (reader : crate :: R < UPTIME_CYCLES1_SPEC >) -> Self { R (reader) } } # [doc = "Register `UPTIME_CYCLES1` writer"]
pub struct W (crate :: W < UPTIME_CYCLES1_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < UPTIME_CYCLES1_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < UPTIME_CYCLES1_SPEC >> for W { # [inline (always)]
fn from (writer : crate :: W < UPTIME_CYCLES1_SPEC >) -> Self { W (writer) } } # [doc = "Field `uptime_cycles` reader - "]
pub type UPTIME_CYCLES_R = crate :: FieldReader < u32 , u32 > ; # [doc = "Field `uptime_cycles` writer - "]
pub type UPTIME_CYCLES_W < 'a , const O : u8 > = crate :: FieldWriter < 'a , u32 , UPTIME_CYCLES1_SPEC , u32 , u32 , 32 , O > ; impl R { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn uptime_cycles (& self) -> UPTIME_CYCLES_R { UPTIME_CYCLES_R :: new (self . bits) } } impl W { # [doc = "Bits 0:31"]
# [inline (always)]
# [must_use]
pub fn uptime_cycles (& mut self) -> UPTIME_CYCLES_W < 0 > { UPTIME_CYCLES_W :: new (self) } # [doc = "Writes raw bits to the register."]
# [inline (always)]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "Bits 32-63 of `TIMER0_UPTIME_CYCLES`. Latched Uptime since power-up (in ``sys_clk`` cycles).\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [uptime_cycles1](index.html) module"]
pub struct UPTIME_CYCLES1_SPEC ; impl crate :: RegisterSpec for UPTIME_CYCLES1_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [uptime_cycles1::R](R) reader structure"]
impl crate :: Readable for UPTIME_CYCLES1_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [uptime_cycles1::W](W) writer structure"]
impl crate :: Writable for UPTIME_CYCLES1_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets UPTIME_CYCLES1 to value 0"]
impl crate :: Resettable for UPTIME_CYCLES1_SPEC { const RESET_VALUE : Self :: Ux = 0 ; } } # [doc = "UPTIME_CYCLES0 (rw) register accessor: an alias for `Reg<UPTIME_CYCLES0_SPEC>`"]
pub type UPTIME_CYCLES0 = crate :: Reg < uptime_cycles0 :: UPTIME_CYCLES0_SPEC > ; # [doc = "Bits 0-31 of `TIMER0_UPTIME_CYCLES`."]
pub mod uptime_cycles0 { # [doc = "Register `UPTIME_CYCLES0` reader"]
pub struct R (crate :: R < UPTIME_CYCLES0_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < UPTIME_CYCLES0_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl From < crate :: R < UPTIME_CYCLES0_SPEC >> for R { # [inline (always)]
fn from (reader : crate :: R < UPTIME_CYCLES0_SPEC >) -> Self { R (reader) } } # [doc = "Register `UPTIME_CYCLES0` writer"]
pub struct W (crate :: W < UPTIME_CYCLES0_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < UPTIME_CYCLES0_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < UPTIME_CYCLES0_SPEC >> for W { # [inline (always)]
fn from (writer : crate :: W < UPTIME_CYCLES0_SPEC >) -> Self { W (writer) } } # [doc = "Field `uptime_cycles` reader - "]
pub type UPTIME_CYCLES_R = crate :: FieldReader < u32 , u32 > ; # [doc = "Field `uptime_cycles` writer - "]
pub type UPTIME_CYCLES_W < 'a , const O : u8 > = crate :: FieldWriter < 'a , u32 , UPTIME_CYCLES0_SPEC , u32 , u32 , 32 , O > ; impl R { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn uptime_cycles (& self) -> UPTIME_CYCLES_R { UPTIME_CYCLES_R :: new (self . bits) } } impl W { # [doc = "Bits 0:31"]
# [inline (always)]
# [must_use]
pub fn uptime_cycles (& mut self) -> UPTIME_CYCLES_W < 0 > { UPTIME_CYCLES_W :: new (self) } # [doc = "Writes raw bits to the register."]
# [inline (always)]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "Bits 0-31 of `TIMER0_UPTIME_CYCLES`.\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [uptime_cycles0](index.html) module"]
pub struct UPTIME_CYCLES0_SPEC ; impl crate :: RegisterSpec for UPTIME_CYCLES0_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [uptime_cycles0::R](R) reader structure"]
impl crate :: Readable for UPTIME_CYCLES0_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [uptime_cycles0::W](W) writer structure"]
impl crate :: Writable for UPTIME_CYCLES0_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets UPTIME_CYCLES0 to value 0"]
impl crate :: Resettable for UPTIME_CYCLES0_SPEC { const RESET_VALUE : Self :: Ux = 0 ; } } } # [doc = "UART"]
pub struct UART { _marker : PhantomData < * const () > } unsafe impl Send for UART { } impl UART { # [doc = r"Pointer to the register block"]
pub const PTR : * const uart :: RegisterBlock = 0xf000_3000 as * const _ ; # [doc = r"Return the pointer to the register block"]
# [inline (always)]
pub const fn ptr () -> * const uart :: RegisterBlock { Self :: PTR } } impl Deref for UART { type Target = uart :: RegisterBlock ; # [inline (always)]
fn deref (& self) -> & Self :: Target { unsafe { & * Self :: PTR } } } impl core :: fmt :: Debug for UART { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("UART") . finish () } } # [doc = "UART"]
pub mod uart { # [doc = r"Register block"]
# [repr (C)]
pub struct RegisterBlock { # [doc = "0x00 - "]
pub rxtx : RXTX , # [doc = "0x04 - TX FIFO Full."]
pub txfull : TXFULL , # [doc = "0x08 - RX FIFO Empty."]
pub rxempty : RXEMPTY , # [doc = "0x0c - This register contains the current raw level of the rx event trigger. Writes to this register have no effect."]
pub ev_status : EV_STATUS , # [doc = "0x10 - When a rx event occurs, the corresponding bit will be set in this register. To clear the Event, set the corresponding bit in this register."]
pub ev_pending : EV_PENDING , # [doc = "0x14 - This register enables the corresponding rx events. Write a ``0`` to this register to disable individual events."]
pub ev_enable : EV_ENABLE , # [doc = "0x18 - TX FIFO Empty."]
pub txempty : TXEMPTY , # [doc = "0x1c - RX FIFO Full."]
pub rxfull : RXFULL , } # [doc = "RXTX (rw) register accessor: an alias for `Reg<RXTX_SPEC>`"]
pub type RXTX = crate :: Reg < rxtx :: RXTX_SPEC > ; # [doc = ""]
pub mod rxtx { # [doc = "Register `RXTX` reader"]
pub struct R (crate :: R < RXTX_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < RXTX_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl From < crate :: R < RXTX_SPEC >> for R { # [inline (always)]
fn from (reader : crate :: R < RXTX_SPEC >) -> Self { R (reader) } } # [doc = "Register `RXTX` writer"]
pub struct W (crate :: W < RXTX_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < RXTX_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < RXTX_SPEC >> for W { # [inline (always)]
fn from (writer : crate :: W < RXTX_SPEC >) -> Self { W (writer) } } # [doc = "Field `rxtx` reader - "]
pub type RXTX_R = crate :: FieldReader < u8 , u8 > ; # [doc = "Field `rxtx` writer - "]
pub type RXTX_W < 'a , const O : u8 > = crate :: FieldWriter < 'a , u32 , RXTX_SPEC , u8 , u8 , 8 , O > ; impl R { # [doc = "Bits 0:7"]
# [inline (always)]
pub fn rxtx (& self) -> RXTX_R { RXTX_R :: new ((self . bits & 0xff) as u8) } } impl W { # [doc = "Bits 0:7"]
# [inline (always)]
# [must_use]
pub fn rxtx (& mut self) -> RXTX_W < 0 > { RXTX_W :: new (self) } # [doc = "Writes raw bits to the register."]
# [inline (always)]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rxtx](index.html) module"]
pub struct RXTX_SPEC ; impl crate :: RegisterSpec for RXTX_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [rxtx::R](R) reader structure"]
impl crate :: Readable for RXTX_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [rxtx::W](W) writer structure"]
impl crate :: Writable for RXTX_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets RXTX to value 0"]
impl crate :: Resettable for RXTX_SPEC { const RESET_VALUE : Self :: Ux = 0 ; } } # [doc = "TXFULL (rw) register accessor: an alias for `Reg<TXFULL_SPEC>`"]
pub type TXFULL = crate :: Reg < txfull :: TXFULL_SPEC > ; # [doc = "TX FIFO Full."]
pub mod txfull { # [doc = "Register `TXFULL` reader"]
pub struct R (crate :: R < TXFULL_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < TXFULL_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl From < crate :: R < TXFULL_SPEC >> for R { # [inline (always)]
fn from (reader : crate :: R < TXFULL_SPEC >) -> Self { R (reader) } } # [doc = "Register `TXFULL` writer"]
pub struct W (crate :: W < TXFULL_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < TXFULL_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < TXFULL_SPEC >> for W { # [inline (always)]
fn from (writer : crate :: W < TXFULL_SPEC >) -> Self { W (writer) } } # [doc = "Field `txfull` reader - "]
pub type TXFULL_R = crate :: BitReader < bool > ; # [doc = "Field `txfull` writer - "]
pub type TXFULL_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , TXFULL_SPEC , bool , O > ; impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn txfull (& self) -> TXFULL_R { TXFULL_R :: new ((self . bits & 1) != 0) } } impl W { # [doc = "Bit 0"]
# [inline (always)]
# [must_use]
pub fn txfull (& mut self) -> TXFULL_W < 0 > { TXFULL_W :: new (self) } # [doc = "Writes raw bits to the register."]
# [inline (always)]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "TX FIFO Full.\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [txfull](index.html) module"]
pub struct TXFULL_SPEC ; impl crate :: RegisterSpec for TXFULL_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [txfull::R](R) reader structure"]
impl crate :: Readable for TXFULL_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [txfull::W](W) writer structure"]
impl crate :: Writable for TXFULL_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets TXFULL to value 0"]
impl crate :: Resettable for TXFULL_SPEC { const RESET_VALUE : Self :: Ux = 0 ; } } # [doc = "RXEMPTY (rw) register accessor: an alias for `Reg<RXEMPTY_SPEC>`"]
pub type RXEMPTY = crate :: Reg < rxempty :: RXEMPTY_SPEC > ; # [doc = "RX FIFO Empty."]
pub mod rxempty { # [doc = "Register `RXEMPTY` reader"]
pub struct R (crate :: R < RXEMPTY_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < RXEMPTY_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl From < crate :: R < RXEMPTY_SPEC >> for R { # [inline (always)]
fn from (reader : crate :: R < RXEMPTY_SPEC >) -> Self { R (reader) } } # [doc = "Register `RXEMPTY` writer"]
pub struct W (crate :: W < RXEMPTY_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < RXEMPTY_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < RXEMPTY_SPEC >> for W { # [inline (always)]
fn from (writer : crate :: W < RXEMPTY_SPEC >) -> Self { W (writer) } } # [doc = "Field `rxempty` reader - "]
pub type RXEMPTY_R = crate :: BitReader < bool > ; # [doc = "Field `rxempty` writer - "]
pub type RXEMPTY_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , RXEMPTY_SPEC , bool , O > ; impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn rxempty (& self) -> RXEMPTY_R { RXEMPTY_R :: new ((self . bits & 1) != 0) } } impl W { # [doc = "Bit 0"]
# [inline (always)]
# [must_use]
pub fn rxempty (& mut self) -> RXEMPTY_W < 0 > { RXEMPTY_W :: new (self) } # [doc = "Writes raw bits to the register."]
# [inline (always)]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "RX FIFO Empty.\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rxempty](index.html) module"]
pub struct RXEMPTY_SPEC ; impl crate :: RegisterSpec for RXEMPTY_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [rxempty::R](R) reader structure"]
impl crate :: Readable for RXEMPTY_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [rxempty::W](W) writer structure"]
impl crate :: Writable for RXEMPTY_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets RXEMPTY to value 0"]
impl crate :: Resettable for RXEMPTY_SPEC { const RESET_VALUE : Self :: Ux = 0 ; } } # [doc = "EV_STATUS (rw) register accessor: an alias for `Reg<EV_STATUS_SPEC>`"]
pub type EV_STATUS = crate :: Reg < ev_status :: EV_STATUS_SPEC > ; # [doc = "This register contains the current raw level of the rx event trigger. Writes to this register have no effect."]
pub mod ev_status { # [doc = "Register `EV_STATUS` reader"]
pub struct R (crate :: R < EV_STATUS_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < EV_STATUS_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl From < crate :: R < EV_STATUS_SPEC >> for R { # [inline (always)]
fn from (reader : crate :: R < EV_STATUS_SPEC >) -> Self { R (reader) } } # [doc = "Register `EV_STATUS` writer"]
pub struct W (crate :: W < EV_STATUS_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < EV_STATUS_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < EV_STATUS_SPEC >> for W { # [inline (always)]
fn from (writer : crate :: W < EV_STATUS_SPEC >) -> Self { W (writer) } } # [doc = "Field `tx` reader - Level of the ``tx`` event"]
pub type TX_R = crate :: BitReader < bool > ; # [doc = "Field `tx` writer - Level of the ``tx`` event"]
pub type TX_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , EV_STATUS_SPEC , bool , O > ; # [doc = "Field `rx` reader - Level of the ``rx`` event"]
pub type RX_R = crate :: BitReader < bool > ; # [doc = "Field `rx` writer - Level of the ``rx`` event"]
pub type RX_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , EV_STATUS_SPEC , bool , O > ; impl R { # [doc = "Bit 0 - Level of the ``tx`` event"]
# [inline (always)]
pub fn tx (& self) -> TX_R { TX_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - Level of the ``rx`` event"]
# [inline (always)]
pub fn rx (& self) -> RX_R { RX_R :: new (((self . bits >> 1) & 1) != 0) } } impl W { # [doc = "Bit 0 - Level of the ``tx`` event"]
# [inline (always)]
# [must_use]
pub fn tx (& mut self) -> TX_W < 0 > { TX_W :: new (self) } # [doc = "Bit 1 - Level of the ``rx`` event"]
# [inline (always)]
# [must_use]
pub fn rx (& mut self) -> RX_W < 1 > { RX_W :: new (self) } # [doc = "Writes raw bits to the register."]
# [inline (always)]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "This register contains the current raw level of the rx event trigger. Writes to this register have no effect.\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ev_status](index.html) module"]
pub struct EV_STATUS_SPEC ; impl crate :: RegisterSpec for EV_STATUS_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [ev_status::R](R) reader structure"]
impl crate :: Readable for EV_STATUS_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [ev_status::W](W) writer structure"]
impl crate :: Writable for EV_STATUS_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets EV_STATUS to value 0"]
impl crate :: Resettable for EV_STATUS_SPEC { const RESET_VALUE : Self :: Ux = 0 ; } } # [doc = "EV_PENDING (rw) register accessor: an alias for `Reg<EV_PENDING_SPEC>`"]
pub type EV_PENDING = crate :: Reg < ev_pending :: EV_PENDING_SPEC > ; # [doc = "When a rx event occurs, the corresponding bit will be set in this register. To clear the Event, set the corresponding bit in this register."]
pub mod ev_pending { # [doc = "Register `EV_PENDING` reader"]
pub struct R (crate :: R < EV_PENDING_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < EV_PENDING_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl From < crate :: R < EV_PENDING_SPEC >> for R { # [inline (always)]
fn from (reader : crate :: R < EV_PENDING_SPEC >) -> Self { R (reader) } } # [doc = "Register `EV_PENDING` writer"]
pub struct W (crate :: W < EV_PENDING_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < EV_PENDING_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < EV_PENDING_SPEC >> for W { # [inline (always)]
fn from (writer : crate :: W < EV_PENDING_SPEC >) -> Self { W (writer) } } # [doc = "Field `tx` reader - `1` if a `tx` event occurred. This Event is triggered on a **falling** edge."]
pub type TX_R = crate :: BitReader < bool > ; # [doc = "Field `tx` writer - `1` if a `tx` event occurred. This Event is triggered on a **falling** edge."]
pub type TX_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , EV_PENDING_SPEC , bool , O > ; # [doc = "Field `rx` reader - `1` if a `rx` event occurred. This Event is triggered on a **falling** edge."]
pub type RX_R = crate :: BitReader < bool > ; # [doc = "Field `rx` writer - `1` if a `rx` event occurred. This Event is triggered on a **falling** edge."]
pub type RX_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , EV_PENDING_SPEC , bool , O > ; impl R { # [doc = "Bit 0 - `1` if a `tx` event occurred. This Event is triggered on a **falling** edge."]
# [inline (always)]
pub fn tx (& self) -> TX_R { TX_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - `1` if a `rx` event occurred. This Event is triggered on a **falling** edge."]
# [inline (always)]
pub fn rx (& self) -> RX_R { RX_R :: new (((self . bits >> 1) & 1) != 0) } } impl W { # [doc = "Bit 0 - `1` if a `tx` event occurred. This Event is triggered on a **falling** edge."]
# [inline (always)]
# [must_use]
pub fn tx (& mut self) -> TX_W < 0 > { TX_W :: new (self) } # [doc = "Bit 1 - `1` if a `rx` event occurred. This Event is triggered on a **falling** edge."]
# [inline (always)]
# [must_use]
pub fn rx (& mut self) -> RX_W < 1 > { RX_W :: new (self) } # [doc = "Writes raw bits to the register."]
# [inline (always)]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "When a rx event occurs, the corresponding bit will be set in this register. To clear the Event, set the corresponding bit in this register.\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ev_pending](index.html) module"]
pub struct EV_PENDING_SPEC ; impl crate :: RegisterSpec for EV_PENDING_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [ev_pending::R](R) reader structure"]
impl crate :: Readable for EV_PENDING_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [ev_pending::W](W) writer structure"]
impl crate :: Writable for EV_PENDING_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets EV_PENDING to value 0"]
impl crate :: Resettable for EV_PENDING_SPEC { const RESET_VALUE : Self :: Ux = 0 ; } } # [doc = "EV_ENABLE (rw) register accessor: an alias for `Reg<EV_ENABLE_SPEC>`"]
pub type EV_ENABLE = crate :: Reg < ev_enable :: EV_ENABLE_SPEC > ; # [doc = "This register enables the corresponding rx events. Write a ``0`` to this register to disable individual events."]
pub mod ev_enable { # [doc = "Register `EV_ENABLE` reader"]
pub struct R (crate :: R < EV_ENABLE_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < EV_ENABLE_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl From < crate :: R < EV_ENABLE_SPEC >> for R { # [inline (always)]
fn from (reader : crate :: R < EV_ENABLE_SPEC >) -> Self { R (reader) } } # [doc = "Register `EV_ENABLE` writer"]
pub struct W (crate :: W < EV_ENABLE_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < EV_ENABLE_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < EV_ENABLE_SPEC >> for W { # [inline (always)]
fn from (writer : crate :: W < EV_ENABLE_SPEC >) -> Self { W (writer) } } # [doc = "Field `tx` reader - Write a ``1`` to enable the ``tx`` Event"]
pub type TX_R = crate :: BitReader < bool > ; # [doc = "Field `tx` writer - Write a ``1`` to enable the ``tx`` Event"]
pub type TX_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , EV_ENABLE_SPEC , bool , O > ; # [doc = "Field `rx` reader - Write a ``1`` to enable the ``rx`` Event"]
pub type RX_R = crate :: BitReader < bool > ; # [doc = "Field `rx` writer - Write a ``1`` to enable the ``rx`` Event"]
pub type RX_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , EV_ENABLE_SPEC , bool , O > ; impl R { # [doc = "Bit 0 - Write a ``1`` to enable the ``tx`` Event"]
# [inline (always)]
pub fn tx (& self) -> TX_R { TX_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - Write a ``1`` to enable the ``rx`` Event"]
# [inline (always)]
pub fn rx (& self) -> RX_R { RX_R :: new (((self . bits >> 1) & 1) != 0) } } impl W { # [doc = "Bit 0 - Write a ``1`` to enable the ``tx`` Event"]
# [inline (always)]
# [must_use]
pub fn tx (& mut self) -> TX_W < 0 > { TX_W :: new (self) } # [doc = "Bit 1 - Write a ``1`` to enable the ``rx`` Event"]
# [inline (always)]
# [must_use]
pub fn rx (& mut self) -> RX_W < 1 > { RX_W :: new (self) } # [doc = "Writes raw bits to the register."]
# [inline (always)]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "This register enables the corresponding rx events. Write a ``0`` to this register to disable individual events.\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ev_enable](index.html) module"]
pub struct EV_ENABLE_SPEC ; impl crate :: RegisterSpec for EV_ENABLE_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [ev_enable::R](R) reader structure"]
impl crate :: Readable for EV_ENABLE_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [ev_enable::W](W) writer structure"]
impl crate :: Writable for EV_ENABLE_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets EV_ENABLE to value 0"]
impl crate :: Resettable for EV_ENABLE_SPEC { const RESET_VALUE : Self :: Ux = 0 ; } } # [doc = "TXEMPTY (rw) register accessor: an alias for `Reg<TXEMPTY_SPEC>`"]
pub type TXEMPTY = crate :: Reg < txempty :: TXEMPTY_SPEC > ; # [doc = "TX FIFO Empty."]
pub mod txempty { # [doc = "Register `TXEMPTY` reader"]
pub struct R (crate :: R < TXEMPTY_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < TXEMPTY_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl From < crate :: R < TXEMPTY_SPEC >> for R { # [inline (always)]
fn from (reader : crate :: R < TXEMPTY_SPEC >) -> Self { R (reader) } } # [doc = "Register `TXEMPTY` writer"]
pub struct W (crate :: W < TXEMPTY_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < TXEMPTY_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < TXEMPTY_SPEC >> for W { # [inline (always)]
fn from (writer : crate :: W < TXEMPTY_SPEC >) -> Self { W (writer) } } # [doc = "Field `txempty` reader - "]
pub type TXEMPTY_R = crate :: BitReader < bool > ; # [doc = "Field `txempty` writer - "]
pub type TXEMPTY_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , TXEMPTY_SPEC , bool , O > ; impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn txempty (& self) -> TXEMPTY_R { TXEMPTY_R :: new ((self . bits & 1) != 0) } } impl W { # [doc = "Bit 0"]
# [inline (always)]
# [must_use]
pub fn txempty (& mut self) -> TXEMPTY_W < 0 > { TXEMPTY_W :: new (self) } # [doc = "Writes raw bits to the register."]
# [inline (always)]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "TX FIFO Empty.\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [txempty](index.html) module"]
pub struct TXEMPTY_SPEC ; impl crate :: RegisterSpec for TXEMPTY_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [txempty::R](R) reader structure"]
impl crate :: Readable for TXEMPTY_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [txempty::W](W) writer structure"]
impl crate :: Writable for TXEMPTY_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets TXEMPTY to value 0"]
impl crate :: Resettable for TXEMPTY_SPEC { const RESET_VALUE : Self :: Ux = 0 ; } } # [doc = "RXFULL (rw) register accessor: an alias for `Reg<RXFULL_SPEC>`"]
pub type RXFULL = crate :: Reg < rxfull :: RXFULL_SPEC > ; # [doc = "RX FIFO Full."]
pub mod rxfull { # [doc = "Register `RXFULL` reader"]
pub struct R (crate :: R < RXFULL_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < RXFULL_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl From < crate :: R < RXFULL_SPEC >> for R { # [inline (always)]
fn from (reader : crate :: R < RXFULL_SPEC >) -> Self { R (reader) } } # [doc = "Register `RXFULL` writer"]
pub struct W (crate :: W < RXFULL_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < RXFULL_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < RXFULL_SPEC >> for W { # [inline (always)]
fn from (writer : crate :: W < RXFULL_SPEC >) -> Self { W (writer) } } # [doc = "Field `rxfull` reader - "]
pub type RXFULL_R = crate :: BitReader < bool > ; # [doc = "Field `rxfull` writer - "]
pub type RXFULL_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , RXFULL_SPEC , bool , O > ; impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn rxfull (& self) -> RXFULL_R { RXFULL_R :: new ((self . bits & 1) != 0) } } impl W { # [doc = "Bit 0"]
# [inline (always)]
# [must_use]
pub fn rxfull (& mut self) -> RXFULL_W < 0 > { RXFULL_W :: new (self) } # [doc = "Writes raw bits to the register."]
# [inline (always)]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "RX FIFO Full.\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rxfull](index.html) module"]
pub struct RXFULL_SPEC ; impl crate :: RegisterSpec for RXFULL_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [rxfull::R](R) reader structure"]
impl crate :: Readable for RXFULL_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [rxfull::W](W) writer structure"]
impl crate :: Writable for RXFULL_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets RXFULL to value 0"]
impl crate :: Resettable for RXFULL_SPEC { const RESET_VALUE : Self :: Ux = 0 ; } } } # [no_mangle]
static mut DEVICE_PERIPHERALS : bool = false ; # [doc = r" All the peripherals."]
# [allow (non_snake_case)]
pub struct Peripherals { # [doc = "CTRL"]
pub CTRL : CTRL , # [doc = "IDENTIFIER_MEM"]
pub IDENTIFIER_MEM : IDENTIFIER_MEM , # [doc = "LEDS"]
pub LEDS : LEDS , # [doc = "SPIFLASH_CORE"]
pub SPIFLASH_CORE : SPIFLASH_CORE , # [doc = "SPIFLASH_PHY"]
pub SPIFLASH_PHY : SPIFLASH_PHY , # [doc = "TIMER0"]
pub TIMER0 : TIMER0 , # [doc = "UART"]
pub UART : UART , } impl Peripherals { # [doc = r" Returns all the peripherals *once*."]
# [cfg (feature = "critical-section")]
# [inline]
pub fn take () -> Option < Self > { critical_section :: with (| _ | { if unsafe { DEVICE_PERIPHERALS } { return None } Some (unsafe { Peripherals :: steal () }) }) } # [doc = r" Unchecked version of `Peripherals::take`."]
# [doc = r""]
# [doc = r" # Safety"]
# [doc = r""]
# [doc = r" Each of the returned peripherals must be used at most once."]
# [inline]
pub unsafe fn steal () -> Self { DEVICE_PERIPHERALS = true ; Peripherals { CTRL : CTRL { _marker : PhantomData } , IDENTIFIER_MEM : IDENTIFIER_MEM { _marker : PhantomData } , LEDS : LEDS { _marker : PhantomData } , SPIFLASH_CORE : SPIFLASH_CORE { _marker : PhantomData } , SPIFLASH_PHY : SPIFLASH_PHY { _marker : PhantomData } , TIMER0 : TIMER0 { _marker : PhantomData } , UART : UART { _marker : PhantomData } , } } }